name: CD - Production

on:
  push:
    tags:
      - 'v*'

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
    - name: Build and push client image
      run: |
        cd client
        docker build -t ${{ secrets.DOCKER_USERNAME }}/task-manager-client:${{ steps.get_version.outputs.VERSION }} .
        docker push ${{ secrets.DOCKER_USERNAME }}/task-manager-client:${{ steps.get_version.outputs.VERSION }}
        docker tag ${{ secrets.DOCKER_USERNAME }}/task-manager-client:${{ steps.get_version.outputs.VERSION }} ${{ secrets.DOCKER_USERNAME }}/task-manager-client:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/task-manager-client:latest
        
    - name: Build and push server image
      run: |
        cd server
        docker build -f Dockerfile.server -t ${{ secrets.DOCKER_USERNAME }}/task-manager-server:${{ steps.get_version.outputs.VERSION }} .
        docker push ${{ secrets.DOCKER_USERNAME }}/task-manager-server:${{ steps.get_version.outputs.VERSION }}
        docker tag ${{ secrets.DOCKER_USERNAME }}/task-manager-server:${{ steps.get_version.outputs.VERSION }} ${{ secrets.DOCKER_USERNAME }}/task-manager-server:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/task-manager-server:latest
        
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/task-manager
          docker-compose pull
          docker-compose up -d
          docker system prune -f
          
    - name: Health check production
      run: |
        sleep 30
        curl -f https://${{ secrets.PRODUCTION_DOMAIN }} || exit 1
        
    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
          Production deployment for version ${{ steps.get_version.outputs.VERSION }}
          
          Changes in this release:
          - Automated deployment via GitHub Actions
          - Docker images: ${{ secrets.DOCKER_USERNAME }}/task-manager-client:${{ steps.get_version.outputs.VERSION }}
          - Docker images: ${{ secrets.DOCKER_USERNAME }}/task-manager-server:${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false 